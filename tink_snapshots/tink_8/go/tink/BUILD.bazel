package(default_visibility = ["//tools/build_defs:internal_pkg"])  # keep

licenses(["notice"])  # Apache 2.0 # keep

load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "aead.go",
        "crypto_format.go",
        "deterministic_aead.go",
        "hybrid_decrypt.go",
        "hybrid_encrypt.go",
        "init.go",
        "key_manager.go",
        "keyset_handle.go",
        "keyset_manager.go",
        "keyset_reader.go",
        "keyset_writer.go",
        "mac.go",
        "mem_keyset_reader.go",
        "primitive_set.go",
        "private_key_manager.go",
        "signer.go",
        "verifier.go",
        "registry.go",
        "util.go",
    ],
    importpath = "github.com/google/tink/go/tink",
    visibility = ["//visibility:public"],
    deps = [
        "//go/internal:go_default_library",
        "//go/subtle/random:go_default_library",
        "//proto:common_go_proto",
        "//proto:tink_go_proto",
        "@com_github_golang_protobuf//proto:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "crypto_format_test.go",
        "keyset_handle_test.go",
        "keyset_manager_test.go",
        "primitive_set_test.go",
        "registry_test.go",
        "util_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//go/aead:go_default_library",
        "//go/testkeysethandle:go_default_library",
        "//go/internal:go_default_library",
        "//go/mac:go_default_library",
        "//go/subtle/aead:go_default_library",
        "//go/subtle/mac:go_default_library",
        "//go/testutil:go_default_library",
        "//proto:aes_gcm_go_proto",
        "//proto:common_go_proto",
        "//proto:hmac_go_proto",
        "//proto:tink_go_proto",
        "@com_github_golang_protobuf//proto:go_default_library",
    ],
)
